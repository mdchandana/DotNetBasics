// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _0EFCoreBasics;

namespace _0EFCoreBasics.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("_0EFCoreBasics.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Laptop"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Phone"
                        });
                });

            modelBuilder.Entity("_0EFCoreBasics.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "sidath"
                        },
                        new
                        {
                            Id = 2,
                            Name = "chandana"
                        },
                        new
                        {
                            Id = 3,
                            Name = "yasiru"
                        });
                });

            modelBuilder.Entity("_0EFCoreBasics.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            OrderedDate = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            OrderedDate = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("_0EFCoreBasics.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            ProductId = 1,
                            Discount = 0m,
                            Qty = 1,
                            UnitPrice = 175000.00m
                        },
                        new
                        {
                            OrderId = 1,
                            ProductId = 2,
                            Discount = 0m,
                            Qty = 1,
                            UnitPrice = 200000.00m
                        },
                        new
                        {
                            OrderId = 2,
                            ProductId = 2,
                            Discount = 0m,
                            Qty = 1,
                            UnitPrice = 50000.00m
                        },
                        new
                        {
                            OrderId = 2,
                            ProductId = 3,
                            Discount = 0m,
                            Qty = 1,
                            UnitPrice = 70000.00m
                        });
                });

            modelBuilder.Entity("_0EFCoreBasics.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QtyInStock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Name = "hp dv5",
                            Price = 175000.00m,
                            QtyInStock = 5
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Name = "hp dv6",
                            Price = 200000.00m,
                            QtyInStock = 5
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Name = "iphone 6s",
                            Price = 50000.00m,
                            QtyInStock = 5
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Name = "iphone 7",
                            Price = 70000.00m,
                            QtyInStock = 5
                        });
                });

            modelBuilder.Entity("_0EFCoreBasics.Models.Order", b =>
                {
                    b.HasOne("_0EFCoreBasics.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("_0EFCoreBasics.Models.OrderDetail", b =>
                {
                    b.HasOne("_0EFCoreBasics.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_0EFCoreBasics.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("_0EFCoreBasics.Models.Product", b =>
                {
                    b.HasOne("_0EFCoreBasics.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("_0EFCoreBasics.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("_0EFCoreBasics.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("_0EFCoreBasics.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("_0EFCoreBasics.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
